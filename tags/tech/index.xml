<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tech on Potato</title><link>https://sneaky-potato.github.io/tags/tech/</link><description>Recent content in Tech on Potato</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 25 Oct 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://sneaky-potato.github.io/tags/tech/index.xml" rel="self" type="application/rss+xml"/><item><title>Sockets, servers and scalability</title><link>https://sneaky-potato.github.io/blog/servers/</link><pubDate>Sat, 25 Oct 2025 00:00:00 +0000</pubDate><guid>https://sneaky-potato.github.io/blog/servers/</guid><description>&lt;h1 id="scaling-a-server-to-handle-many-requests"&gt;Scaling a server to handle many requests&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Everyone can talk, listening is where the actual difficulty lies.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Caution: If the word &lt;em&gt;&lt;strong&gt;socket&lt;/strong&gt;&lt;/em&gt; does not ring any bells in your mind, this article will be difficult for you to follow.&lt;/p&gt;
&lt;h2 id="bare-bones-server"&gt;Bare bones server&lt;/h2&gt;
&lt;p&gt;At the time of writing this article, I am employed as a fullstack software engineer and a lot of my work intersects with writing backend microservices.
Microservices that scale for traffic. I primarily use &lt;a href="https://go.dev/"&gt;Go&lt;/a&gt; to write these backend APIs.
Often times, I think about how backend servers are implemented internally and I decided to research a bit on the topic and that is the discussion of this very article.
So if you are someone who has written any form of backend APIs, web servers or network programming, this article is going to be perfect for you.&lt;/p&gt;</description></item><item><title>Quines</title><link>https://sneaky-potato.github.io/til/quine/</link><pubDate>Tue, 18 Jun 2024 00:00:00 +0000</pubDate><guid>https://sneaky-potato.github.io/til/quine/</guid><description>&lt;div class="lead !mb-9 text-xl"&gt;
When programming becomes a piece of art.
&lt;/div&gt;
&lt;h2 id="what-is-it"&gt;What is it?&lt;/h2&gt;
&lt;p&gt;A simple quine is its simplicity is a computer program that takes no input and produces a copy of its own source code as its only output. Think of it as a self replicating program. People have been coding quines for a long time now and have even gone ot the extent of creating more creative and smallest quines possible.
Here is a simple to understand quine written in C:&lt;/p&gt;</description></item><item><title>Down the linux rabbit hole</title><link>https://sneaky-potato.github.io/blog/arch_linux/</link><pubDate>Thu, 16 May 2024 00:00:00 +0000</pubDate><guid>https://sneaky-potato.github.io/blog/arch_linux/</guid><description>&lt;div class="lead !mb-9 text-xl"&gt;
Assembling real linux OS experience
&lt;/div&gt;
&lt;p&gt;You cannot call yourself an absolute madlad if you&amp;rsquo;ve not taken this step in your sorry peaceful life.&lt;/p&gt;
&lt;h2 id="one-way-trip"&gt;One way trip&lt;/h2&gt;
&lt;p&gt;I had manjaro installed in my main SSD and for the most part is was awesome, until it (&lt;em&gt;drumrolls&lt;/em&gt;) &lt;em&gt;&lt;strong&gt;wasn&amp;rsquo;t&lt;/strong&gt;&lt;/em&gt;. I backed up every important config folder and my work directories in my hard drive.&lt;/p&gt;
&lt;p&gt;Next thing, I installed Arch Linux in my hard drive (I was sceptical and hesitant) and setup &lt;code&gt;bspwm&lt;/code&gt; &lt;code&gt;polybar&lt;/code&gt; &lt;code&gt;sxhkd&lt;/code&gt; and &lt;code&gt;rofi&lt;/code&gt; to test things out. There was nothing, no frontend, it felt like a server without pages, can&amp;rsquo;t control brightness, had to setup audio, everything felt like a punch in the face, a blissful punch.&lt;/p&gt;</description></item><item><title>Rofi and its powerful scripts</title><link>https://sneaky-potato.github.io/til/rofi/</link><pubDate>Tue, 14 May 2024 00:00:00 +0000</pubDate><guid>https://sneaky-potato.github.io/til/rofi/</guid><description>&lt;div class="lead !mb-9 text-xl"&gt;
When you realize necessity is the mother of invention
&lt;/div&gt;
&lt;h2 id="help-with-sxhkd"&gt;Help with Sxhkd&lt;/h2&gt;
&lt;p&gt;I kept on forgetting the keybindings of my &lt;a href="https://github.com/baskerville/bspwm"&gt;bspwm&lt;/a&gt; + &lt;a href="https://github.com/baskerville/sxhkd"&gt;sxhkd&lt;/a&gt; workflow setup, initially. The obvious solution was to setup a help menu which will help me remember the bindings whenever I needed them. That is when I went on a internet voyage to find such a thing.
To my relief I found the perfect &lt;a href="https://my-take-on.tech/2020/07/03/some-tricks-for-sxhkd-and-bspwm/"&gt;blog&lt;/a&gt; describing this and many cool features we can achieve in the setup when combined with &lt;a href="https://github.com/davatorium/rofi"&gt;rofi&lt;/a&gt;.&lt;/p&gt;</description></item><item><title>Fundamental Theorem of Software Engineering</title><link>https://sneaky-potato.github.io/til/fundamental-theorem-se/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://sneaky-potato.github.io/til/fundamental-theorem-se/</guid><description>&lt;div class="lead !mb-9 text-xl"&gt;
Solution to most of the problems when building software systems
&lt;/div&gt;
&lt;p&gt;The &lt;a href="https://en.wikipedia.org/wiki/Fundamental_theorem_of_software_engineering"&gt;theorem&lt;/a&gt; simply states the following&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We can solve any problem by introducing an extra level of indirection&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Isn&amp;rsquo;t this interesting? The more you read and think about it the context of software systems, the more it makes sense.
And that applies to all layers of abstraction that you know, starting from abstraction in programming languages like C++ to the abstraction in kernel modules and interfaces&lt;/p&gt;</description></item><item><title>The First Wiki</title><link>https://sneaky-potato.github.io/til/wikiwikiweb/</link><pubDate>Fri, 13 May 2022 00:00:00 +0000</pubDate><guid>https://sneaky-potato.github.io/til/wikiwikiweb/</guid><description>&lt;div class="lead !mb-9 text-xl"&gt;
So, you thought wikipedia&amp;rsquo;s the god wiki?
&lt;/div&gt;
&lt;p&gt;The history of wikis dates from 1994, when Ward Cunningham invented the concept and gave it its name. &lt;a href="http://wiki.c2.com/"&gt;C2 wiki&lt;/a&gt; thus became the first wiki, or a website with pages that can be edited via the browser by its own target audience, with a version history for each page.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m not sure how many people know about this website (barring the veteran software developers ofc), but if you&amp;rsquo;re interested in software design patterns then this website is nothing less than a rollercoaster ride for you. I mean, did you know there&amp;rsquo;s something known as &lt;a href="http://wiki.c2.com/?PairProgrammingPingPongPattern"&gt;Pair Programming Ping Pong Pattern&lt;/a&gt;?&lt;/p&gt;</description></item><item><title>A Computer Vision Problem</title><link>https://sneaky-potato.github.io/blog/cv/</link><pubDate>Sat, 05 Mar 2022 00:00:00 +0000</pubDate><guid>https://sneaky-potato.github.io/blog/cv/</guid><description>&lt;div class="lead !mb-9 text-xl"&gt;
An interesting Computer Vision problem with all my approaches and an elegant solution.
&lt;/div&gt;
&lt;p&gt;Original problem statement file and required files &lt;a href="https://drive.google.com/drive/folders/1BDYyxglyihcEPfUyxoK2Iq1567Ymt3PN?usp=sharing"&gt;here&lt;/a&gt;. This problem was given to me in my sophomore year as a task under my tenure in the ARK perception team.&lt;/p&gt;
&lt;p&gt;I haven&amp;rsquo;t done robotics in a long while (am writing this thing after leaving all that stuff behind), this being the only testimony of me having done those courses on image processing lol.&lt;/p&gt;</description></item></channel></rss>