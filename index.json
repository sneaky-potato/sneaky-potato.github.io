[{"content":" A little insight into this potato\u0026rsquo;s well-maintained, organised mess. I\u0026rsquo;ve come to realize that expressing your thoughts out (and loud) does help most of the times :D\n","date":null,"permalink":"https://sneaky-potato.github.io/blog/","section":"Blog","summary":"","title":"Blog"},{"content":" Memory and this beauty: \\(\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887â€¦\\) Changing sizes #If you do programming you would be familiar with the likes of std::vector or ArrayList\u0026lt;\u0026gt; or slices. These are examples of dynamic array. These are arrays which can change their size during runtime. On the contrary we have static arrays which have their size defined and cannot be changed dynamically. A natural question is how do these structures grow in size when elements are appended to them?\nConsider the following terms:\nsize: logical length of the array capacity: the maximum logical length of the array int arr[256]; // a static array of capacity 256 is defined arr[0] = 1; // size of the array is 2 arr[1] = 2; // as only 2 meaningful elements are inserted The approach used for appending elements goes like this in case of dynamic arrays-\nuse a static array grow the array in size when inserting a new element makes size \u0026gt;= capacity this is done by creating a new array of larger capacity and copying the older array in this new memory location the older array is then deleted and this new larer array can be used for further appends but the question is, how large this new array should be? The below code snippet shows the approach used with doubling the array when required-\nfunction insertEnd(dynarray a, element e) if (a.size == a.capacity) // notice the capacity is doubled here a.capacity = a.capacity * 2 // (copy the contents to the new memory location here) a[a.size] = e // assign e to last index a.size = a.size + 1 // increase size Growth Factor #Notice in the above code snippet, array capacity gets doubled each time we need more size, this is called the growth factor. Now to answer, what should be optimal growth factor for this operation? We first need to define the cost of the operation for this question to make sense. To understand this, let\u0026rsquo;s take a look at what values existing systems use (thanks wikipedia1)\nImplementation Growth Factor Java ArrayList 1.5 Python PyListObject ~1.125 (n + (n \u0026raquo; 3)) G++ 5.2.0 2 Facebook folly/FBVector 1.5 Go slices between 1.25 and 2 The folly/FBVector2 describes why growth factor of 2 is not good:\nSay the size of array is \\(S\\), capacity \\(C\\) and growth factor \\(f\\)\nfirst reallocation, a new array of capacity \\(f*C\\) is created while the old memory of size \\(C\\) is marked obsolete second reallocation, a new array of capacity \\(f*f*C\\) is created while older memory of size \\(C + f*C\\) is marked obsolete since arrays are contiguous we are constrained to only take contiguous sections in the memory This creates the following series of memory- $$ C, C*f, C*f^2, C*f^3, \u0026hellip; $$\nSay \\(f = 2\\), this presents the following series- $$ C, 2C, 4C, 8C, \u0026hellip; $$\nHere every element in the series will be strictly larger than the sum of all previous ones because of the remarkable equality: $$ C + 2C + 4C + 8C + \u0026hellip; + 2^nC = (2^{n+1} - 1)C \u0026lt; 2^{n+1}C $$\nSo this means new array is of size \\(2^{n+1}C\\) and cannot use the obsolete marked memory because it is of size \\((2^{n+1}-1)C\\), hence a growth factor less than 2 is preferred.\nThis can also be demonstrated by taking some real values, say growth factor is 1.5, and we start with 16 byte array allocation\nStart with 16 bytes When you need more, allocate 24 bytes, then free up the 16, leaving a 16-byte hole When you need more, allocate 36 bytes, then free up the 24, leaving a 40-byte hole When you need more, allocate 54 bytes, then free up the 36, leaving a 76-byte hole When you need more, allocate 81 bytes, then free up the 54, leaving a 130-byte hole When you need more, use 122 bytes (rounding up) from the 130-byte hole This will not be possible with a growth factor of 2, your array will be forced to crawl forward in memory and will not be able to use free-ed up memory. Optimal Growth Factor #For optimality, we need to use the free-ed space efficiently, or as soon as possible. This will happen after the second reallocation3 if and only if obsolete memory size is big enough to contian new memory $$ C + f*C \u0026gt;= f*f*C $$ The \\(C\\) factor can be cancelled out here and we are presented with a familiar quadratic inequality $$ 1 + f \u0026gt;= f^2 $$ $$ f^2 - f - 1 \u0026lt;= 0 $$ $$ f \u0026lt;= \\varphi = \\frac{1 + \\sqrt{5}} {2} $$\nAnd yes the golden ratio just made its way in this problem as well. This reminds of a very beautiful visual shown in Numberphile4 using golden ratio.\nSince golden ratio is defined as \\(\\lim_{n\\to\\infty}\\frac{T_{n}}{T_{n-1}}\\) where \\(T_n\\) is the nth fibonacci number, so this means to grow the array as fibonacci numbers grow.\nReal life solution #In reality after the nth allocation we would have the following memory chunks-\n$$ C, fC, f^2C, f^3C, \u0026hellip;, f^{n-1}C, f^{n}C $$\nThe current array occupies the space \\(f^{n-1}C\\), new space is \\(f^{n}C\\) and we have \\(C+fC+f^2C+f^3C+\u0026hellip;+f^{n-2}C\\) free space. We want to fit the new array in older free memory, this means solving- $$ C+fC+f^2C+f^3C+\u0026hellip;+f^{n-2}C \u0026gt;= f^nC $$\n$$ \\frac{f^{n-1}-1}{f-1} \u0026gt;= f^n $$\n$$ f^{n-1}-1 \u0026gt;= f^{n+1} - f^n $$\nFor very large n \\(f^{n-1}\\) dominates 1 so this can be written as the above quadratic giving golden ratio as the ideal factor. However for small n, a value slightly less than \\(\\varphi\\) works, which is often taken as 1.5\nI wrote this whole page because this video popped in my youtube feed.\nVery interesting insights which I have not mentioned in this post.\nDynamic Array - Wikipedia\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nFacebook folly/FBVector\u0026#160;\u0026#x21a9;\u0026#xfe0e;\ncpp-internals-stl-vector\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nThe Golden Ratio (why it is so irrational) - Numberphile\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"6 March 2025","permalink":"https://sneaky-potato.github.io/blog/dynamic-array/","section":"Blog","summary":"","title":"Dynamics of a dynamic array"},{"content":"","date":null,"permalink":"https://sneaky-potato.github.io/tags/life/","section":"Tags","summary":"","title":"Life"},{"content":"","date":null,"permalink":"https://sneaky-potato.github.io/","section":"sneaky-potato","summary":"","title":"sneaky-potato"},{"content":"","date":null,"permalink":"https://sneaky-potato.github.io/tags/","section":"Tags","summary":"","title":"Tags"},{"content":" When programming becomes a piece of art. What is it? #A simple quine is its simplicity is a computer program that takes no input and produces a copy of its own source code as its only output. Think of it as a self replicating program. People have been coding quines for a long time now and have even gone ot the extent of creating more creative and smallest quines possible. Here is a simple to understand quine written in C:\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; int main() { const char* src = \u0026#34;#include \u0026lt;stdio.h\u0026gt;\\n#include \u0026lt;string.h\u0026gt;\\n\\nint main() {\\n const char* src = \\\u0026#34;?\\\u0026#34;;\\n size_t src_len = strlen(src);\\n for (size_t i=0; i\u0026lt;src_len; i++) {\\n if (src[i] == 63) {\\n for (size_t j=0; j\u0026lt;src_len; j++) {\\n switch (src[j]) {\\n case \u0026#39;\\\\n\u0026#39;: printf(\\\u0026#34;\\\\\\\\n\\\u0026#34;); break;\\n case \u0026#39;\\\u0026#34;\u0026#39;: printf(\\\u0026#34;\\\\\\\\\\\\\\\u0026#34;\\\u0026#34;); break;\\n case \u0026#39;\\\\\\\\\u0026#39;: printf(\\\u0026#34;\\\\\\\\\\\\\\\\\\\u0026#34;); break;\\n default: printf(\\\u0026#34;%c\\\u0026#34;, src[j]);\\n }\\n }\\n } else {\\n printf(\\\u0026#34;%c\\\u0026#34;, src[i]);\\n }\\n }\\n return 0;\\n}\\n\u0026#34;; size_t src_len = strlen(src); for (size_t i=0; i\u0026lt;src_len; i++) { if (src[i] == 63) { for (size_t j=0; j\u0026lt;src_len; j++) { switch (src[j]) { case \u0026#39;\\n\u0026#39;: printf(\u0026#34;\\\\n\u0026#34;); break; case \u0026#39;\u0026#34;\u0026#39;: printf(\u0026#34;\\\\\\\u0026#34;\u0026#34;); break; case \u0026#39;\\\\\u0026#39;: printf(\u0026#34;\\\\\\\\\u0026#34;); break; default: printf(\u0026#34;%c\u0026#34;, src[j]); } } } else { printf(\u0026#34;%c\u0026#34;, src[i]); } } return 0; } All credits to Tsoding Daily who creates a quine clock but in C in this video.\nMore quines # clock world madelbrotset fire digital writing clock analog clock fluid ","date":"18 June 2024","permalink":"https://sneaky-potato.github.io/til/quine/","section":"Today I Learned","summary":"","title":"Quines"},{"content":"","date":null,"permalink":"https://sneaky-potato.github.io/tags/tech/","section":"Tags","summary":"","title":"Tech"},{"content":" Just learned how set this heading right in this template. This page is supposed to be that awful collection of rants and tidbits which I somehow stumbled into in my free(?) time.\n","date":null,"permalink":"https://sneaky-potato.github.io/til/","section":"Today I Learned","summary":"","title":"Today I Learned"},{"content":" Assembling real linux OS experience You cannot call yourself an absolute madlad if you\u0026rsquo;ve not taken this step in your sorry peaceful life.\nOne way trip #I had manjaro installed in my main SSD and for the most part is was awesome, until it (drumrolls) wasn\u0026rsquo;t. I backed up every important config folder and my work directories in my hard drive.\nNext thing, I installed Arch Linux in my hard drive (I was sceptical and hesitant) and setup bspwm polybar sxhkd and rofi to test things out. There was nothing, no frontend, it felt like a server without pages, can\u0026rsquo;t control brightness, had to setup audio, everything felt like a punch in the face, a blissful punch.\nBig decision #I installed Arch but this time in my SSD, but I took the foolish path of a script kiddie, I used the horrendous arch installer script. And the horror doesn\u0026rsquo;t end here, for some reason I installed Gnome DE.\nBut then I really wanted to try and setup bspwm and polybar. To try a tiling window manager as my main workflow, it was a dream, I wanted to become a wizard. I posted on reddit to help me with this predicament, particularly removing gnome and installing a window manager. I recieved a comment which simply stated to not use arch installer script, somebody asked why and the godly reply after that read\nIt can lead to cases where someone doesn\u0026#39;t know how to install packages on their own For example when switching from gnome to bspwm And it hit hard.\nWhy Arch #I reinstalled arch but this time manually. I setup all the configs for my bspwm setup and it is amazing. The joy that I got by writing a bash script for invoking a dunst notification on pressing volume keys on my keyboard was phenomenal.\nYou can have a look at my dotfiles from here\nThe reason why arch exists is to customize the linux experience and to present a real do-it-yourself os. Don\u0026rsquo;t use it like windows, kids, be a real man and face the black screen of suffering.\n","date":"16 May 2024","permalink":"https://sneaky-potato.github.io/blog/arch_linux/","section":"Blog","summary":"","title":"Down the linux rabbit hole"},{"content":"","date":null,"permalink":"https://sneaky-potato.github.io/tags/linux/","section":"Tags","summary":"","title":"Linux"},{"content":"","date":null,"permalink":"https://sneaky-potato.github.io/tags/os/","section":"Tags","summary":"","title":"Os"},{"content":" When you realize necessity is the mother of invention Help with Sxhkd #I kept on forgetting the keybindings of my bspwm + sxhkd workflow setup, initially. The obvious solution was to setup a help menu which will help me remember the bindings whenever I needed them. That is when I went on a internet voyage to find such a thing. To my relief I found the perfect blog describing this and many cool features we can achieve in the setup when combined with rofi.\nsxhkd-help\n#!/bin/bash awk \u0026#39;/^[a-z]/ \u0026amp;\u0026amp; last {print \u0026#34;\u0026lt;small\u0026gt;\u0026#34;,$0,\u0026#34;\\t\u0026#34;,last,\u0026#34;\u0026lt;/small\u0026gt;\u0026#34;} {last=\u0026#34;\u0026#34;} /^#/{last=$0}\u0026#39; ~/.config/sxhkd/sxhkdrc | column -t -s $\u0026#39;\\t\u0026#39; | rofi -dmenu -i -markup-rows -no-show-icons -width 1000 -lines 15 -yoffset 40 And then just add an appropriate key binding in a the sxhkdrc file\n# help menu super + slash ~/.config/sxhkd/sxhkd-help Clipboard #The same blog describes a method to setup a clipboard using rofi, sxhkd and clipmenu in the following manner.\nsxhkdrc\n# clipboard alt + v CM_LAUNCHER=rofi clipmenu \\ -location 1 \\ -m -3 \\ -no-show-icons \\ -theme-str \u0026#39;* \\{ font: 10px; \\}\u0026#39; \\ -theme-str \u0026#39;listview \\{ spacing: 0; \\}\u0026#39; \\ -theme-str \u0026#39;window \\{ width: 20em; \\}\u0026#39; The result is a very concise clipboard showing the recent clips.\n","date":"14 May 2024","permalink":"https://sneaky-potato.github.io/til/rofi/","section":"Today I Learned","summary":"","title":"Rofi and its powerful scripts"},{"content":"","date":null,"permalink":"https://sneaky-potato.github.io/tags/reading/","section":"Tags","summary":"","title":"Reading"},{"content":" Classic buffer overflow bug Most computer systems measure unix time- the number of seconds elapsed since the Unix epoch (00:00:00 UTC on 1 January 1970) â€“ and store it in a signed 32-bit integer However the data type can only store numbers from -(231) and (232 - 1) (random trivia: this number is the eighth Mersenne prime).\nThis means the latest time that can be properly encoded is (232 - 1) seconds after epoch, ehich translates to 03:14:07 UTC on 19 January 2038. Attempting to increment to the following second (03:14:08) will cause the integer to overflow, setting its value to âˆ’(231) which systems will interpret as 231 seconds before epoch (20:45:52 UTC on 13 December 1901)\nThis is the year 2038 problem, many systems (old ones surely) if not patched will break in unexpected ways on that date.\n","date":"30 June 2023","permalink":"https://sneaky-potato.github.io/til/2038/","section":"Today I Learned","summary":"","title":"Year 2038 problem"},{"content":" Super fast distributed port scanner Just search up Carna botnet and you\u0026rsquo;ll be presented with a picture of world map. This is supposed to be the scan result of Carna botnet. The idea of this concept was to measure the extent of internet in what the creator called the Internet Census of 2012. The data was collected by infiltrating Internet devices, especially routers, that used a default password or no password at all. It was named after Carna, the Roman goddess for the protection of inner organs and health.\nThe guy actually wrote an entire paper here showcasing their proof-of-concept and the heat map of collected data.\nI got to know about this by a podcast episode by Darknet Diaries. Just search up Darknet Diaries on Spotify or Youtube (amazing content). Here is the website link\n","date":"20 June 2023","permalink":"https://sneaky-potato.github.io/til/internet-survey/","section":"Today I Learned","summary":"","title":"Internet Census 2012"},{"content":" More reading material Paul Graham best known for his work on Lisp or his former startup Viaweb (later renamed Yahoo! Store) But I got to know about this guy from the essays he\u0026rsquo;s written and published on his website\nYou can have a look at the full list from here\nI\u0026rsquo;ve read Good and Bad Procrastination and Trolls\n","date":"24 April 2023","permalink":"https://sneaky-potato.github.io/til/paul-graham/","section":"Today I Learned","summary":"","title":"Paul Graham and his essays"},{"content":" Solution to most of the problems when building software systems The theorem simply states the following\nWe can solve any problem by introducing an extra level of indirection\nIsn\u0026rsquo;t this interesting? The more you read and think about it the context of software systems, the more it makes sense. And that applies to all layers of abstraction that you know, starting from abstraction in programming languages like C++ to the abstraction in kernel modules and interfaces\n","date":"8 November 2022","permalink":"https://sneaky-potato.github.io/til/fundamental-theorem-se/","section":"Today I Learned","summary":"","title":"Fundamental Theorem of Software Engineering"},{"content":"","date":null,"permalink":"https://sneaky-potato.github.io/tags/strategy/","section":"Tags","summary":"","title":"Strategy"},{"content":" Ayy, how much for that large bucket over there, sir? Classic cringe-full bucket list, will keep updating this.\nTo-do-before-graduation #I came to campus in my 4th semester. I don\u0026rsquo;t think I can ever claim that I know my campus in and out (even on my last day here as a student). There\u0026rsquo;s just too many corners and nooks here. The following list doesn\u0026rsquo;t make much sense, but hey, atleast I\u0026rsquo;ll have something to look forward to till then.\nClimb clock tower Spend one entire night in Nalanda Academic # Work at an HFT firm Get a masters in core CS Complete one research program Answer 100 questions on stackoverflow Life # Get over fear of heights Travel around the world Try out cuisine of all major countries Become a music connoisseur Become a tea and coffee connoisseur as well ","date":"23 September 2022","permalink":"https://sneaky-potato.github.io/blog/bucket-list/","section":"Blog","summary":"","title":"Bucket List"},{"content":" ~(~1). I act like normal people, almost everyday but then I relax a bit and do weird stuff. Idk, it feels like I\u0026rsquo;m the \u0026ldquo;normal\u0026rdquo; guy at that time.\nWhy are you writing right now? # Must leave this information, else they won\u0026rsquo;t be able to know. This is our only form of communication. The last hope.\nEven I wouldn\u0026rsquo;t expect myself to be this so descriptive lol. That\u0026rsquo;s like too much verbose.\nWhaddup bud? # Time going very slow, that\u0026rsquo;s like the most obvious of them all i guess.\nToo much reaction to stimuli. Idk how to put it in words but, feels, terrific.\nHungry, thirsty.\nMemory nhk.\nEasily zone out on large hits / initial ones\nNon boring part stars from here-\nAppreciation for art You feel creativity (a little too much) Too deep interpolation and introspection of some past / presently past event. I was thinking a lot about 2020 recently. Change of perspective, own opinion, ik ik. Feel like input senses are, are, monocolour? Trying to differentiate between 0 and 1 Earlier theory says, both are 1/2. Miss my then self (sem 4). I\u0026rsquo;ve changed Lmaooo was thinking the same (sem 4 guy about online sem guy). Just too many Deja Vu\u0026rsquo;s than I can digest. Non chalant behaviour I feel, I will forget about these, but, they are like, very normal things? So, why am I worried? Idk man, feels like the 0 guy will pay no heed to this. Trips?- music trips, road trips, maggu trips? Eventually everyting under control.\nApes together strong\nThe box not present, really wrong scale of things, social norms, confusion-\nNotion of normal things- historical facts and socially accepted acts (are not important) Cannot rely on these to judge my current time. Concept of present- you, are, writing the book. You, are, the new normal. Subjectivity I\u0026rsquo;ll never know if I\u0026rsquo;m correct or not. Review by my other fellows # Humari RAM kam ho gyi hai?\n~ Druhin Abrol\nAllahu akbar, time to drop them bombs\n~ Me\nI just can\u0026rsquo;t generalize. It has to be different, I know it. Like, it feels like an island, too far and too cool. Must drop some good easters down there.\n","date":"18 September 2022","permalink":"https://sneaky-potato.github.io/blog/on/","section":"Blog","summary":"","title":"Glitch 101 Guide"},{"content":"","date":null,"permalink":"https://sneaky-potato.github.io/tags/yes/","section":"Tags","summary":"","title":"Yes"},{"content":"","date":null,"permalink":"https://sneaky-potato.github.io/tags/non-tech/","section":"Tags","summary":"","title":"Non-Tech"},{"content":" You got me with \u0026rsquo;em thicc words (â—¡â€¿â—¡*). I always wanted to try out writing. Classic English writing, that is, other than the assembly-directive-shenanigans that I\u0026rsquo;m writing nowadays for my assignments (T_T).\nBlog # Lol, talking about my blog in another one of my blogs, recursive literature or wot (Related note- How Blogs Broke The Web).\nI started this blog with nothing particular in my mind. Main objective was to setup the website and maybe show people about what I like / do behind the screen.\nBooks #I got this thing from my former English teacher to be honest. Wouldn\u0026rsquo;t have started if she wasn\u0026rsquo;t my teacher I guess. Still an occassional reader, though.\nI kind of started with Animal Farm, read 1984 next. Read The Alchemist, followed by The Courage To Be Disliked (man, Adlerian psychology deserves a blog on itself, ngl). I recently completed Kafka On The Shore. I am currently reading Crime and Punishment, have Fahrenheit 451, Catch 22 and Metamorphosis next on reading list.\nPoetry #The major poems that I\u0026rsquo;ve read would be from my school, didn\u0026rsquo;t really make an effort to explore that much. However, I did try writing a poem or two in my first year. (Peak cringe though (â•¯Â°â–¡Â°)â•¯, but I\u0026rsquo;ll just leave them here )\nRestless under a bleak rest #I thought it would end in a week or two, But life did surprise me with a spooky peek-a-boo All days of the week seemed to amalgamate, Soon it became hard to even track the date I feel tired roaming aimlessly, From one room to another, dinner till lunch For the first time in a long stretch, rest Did feel like a long dismal touch I thought I knew all the walls in my home, But soon I found new spots, new stains I could notice the color of that wall getting dull, I could already see the tiles on floor to cull The situation was unique and largely new, The new which felt like there was nothing to do When it felt voluntary but nowhere necessary, To even try to find my other shoe Why this year? Why this time? Rather strange, perhaps even for gods Each time I hoped for good news on telly, Each time my eyes met new peaks, new records Lord, oh lord, when will this end? I can feel the knee joints of my patience bend Sometimes I envy the sleeping-self of mine, For he gets to go with his buddies to dine Other times I feel good for the future to come, For I would be able to tell a tale for once But when will it come? seems no one knows, I want to meet, to sing along, to dance Thereâ€™s a liâ€™l otter, trapped in its holt Gaining each day, an ounce of a pound Sitting in front of the damned window Enough to make its vision go out of bound Thereâ€™s a liâ€™l frog, trapped in a well Croaking helplessly where is has to dwell Cannot get out, it has to wait But no information, till how much late? It ends soon, I can only hope Perhaps itâ€™s a test, indeed a tricky one I pass this test, I can only hope Many of my chores, are yet to be done Lord, oh lord, when will this end? I can feel the knee joints of my patience bend. Summer of 2007 #It was the summer of 2007, a blissful tale When I was a mere kid, a round face-pale That hazy journey to my Uncleâ€™s college, The recurrence of occurrence in the Timeâ€™s gale I remember the toy camera, the gun, the place When Iâ€™d run across those roads to have a race Though much of it is lost from inside my cranium, The age when I found it hard to tie my shoe lace I remember that supper, the people, the camera shots I remember the supposed fun with those touch-me-nots Maybe even that errand to that hostel room, A time when it was easy to connect back the dots Yes, am talking about that college, a trip A trip which still takes rounds in my grip Oh the Train, the Plane, the Jail, I wish I could describe all, but alas, things take a hard time sliding from mind to lip Time passed within the wink of eye and I was already sitting for my JoSAA pie I had a talk with my Uncle before the round, But the yarns about his college wouldnâ€™t die Before I could take a note, Time had played itâ€™s clever toss I now was in the same college where once my Uncle was I sensed as if that past self of mine, smiled at me For the circle of time, was now sort of complete ","date":"19 August 2022","permalink":"https://sneaky-potato.github.io/blog/literature/","section":"Blog","summary":"","title":"Writing"},{"content":"","date":null,"permalink":"https://sneaky-potato.github.io/tags/lifestyle/","section":"Tags","summary":"","title":"Lifestyle"},{"content":" An algorithm which answers the ages old question- is he/she the right one for me? There are many problems where computer scientists employ interesting algorithms to solve them. One such problem which is often seen in real life is the problem of Optimal Stopping.\nAlso known as The Secretary problem (GFG article on the same- here), say youâ€™re interviewing a group of applicants for a position, how do you maximize the chances of hiring the single best applicant in the pool? (Once a candidate is rejected, they are gone forever and cannot be recalled.)\nInterestingly the dating variant of the problem asks how many people should you date before truly finding the one or deciding to settle down with? Tricky question but surprisingly probability has an answer for this- \\(\\dfrac{1}{e} \\) or approximately 37%.\nLet\u0026rsquo;s say you want to date \\( n\\) people (idk how you\u0026rsquo;d do that though) First date \\( \\dfrac{n}{e}\\) without commiting to anyone of them, (here e is the base of the natural logarithm) And then ask the rest, one by one Now select the person outranking the candidates you\u0026rsquo;ve seen so far Thus maximizing the probability of going out with the best person Marry that person, \u0026lsquo;cause they are the best match for you (according to probability) By the way, do check out The 37% Rule verse by Ernest Davis. Man\u0026rsquo;s got an enitre page of his amazing verses here- Verses for the Information Age (found this awesome piece of literature accidentally)\nWon\u0026rsquo;t be going into details of this thing but you can check out this for a proof, or this paper for a more detailed historical outlook to the problem.\n","date":"15 May 2022","permalink":"https://sneaky-potato.github.io/til/37percent/","section":"Today I Learned","summary":"","title":"The 37% Rule"},{"content":"","date":null,"permalink":"https://sneaky-potato.github.io/tags/design-patterns/","section":"Tags","summary":"","title":"Design-Patterns"},{"content":" So, you thought wikipedia\u0026rsquo;s the god wiki? The history of wikis dates from 1994, when Ward Cunningham invented the concept and gave it its name. C2 wiki thus became the first wiki, or a website with pages that can be edited via the browser by its own target audience, with a version history for each page.\nI\u0026rsquo;m not sure how many people know about this website (barring the veteran software developers ofc), but if you\u0026rsquo;re interested in software design patterns then this website is nothing less than a rollercoaster ride for you. I mean, did you know there\u0026rsquo;s something known as Pair Programming Ping Pong Pattern?\nSome of my accidentally-found good topics are-\nPattern Index AntiPattern Catalog Code Smell Analysis Paralysis Big Project Syndrome Programmers Are Wankers ","date":"13 May 2022","permalink":"https://sneaky-potato.github.io/til/wikiwikiweb/","section":"Today I Learned","summary":"","title":"The First Wiki"},{"content":" That point when game physics make perfect sense. There are only a few games whose physics and mechanics actually make sense. Unironically people use it in non game envronments with the objective of increasing productivity and interaction.\nHonestly successful gamification has sorta become a standard for comparing things. Duolingo in education, Starbucks Rewards in marketing and Snapstreak in Snapchat are some good examples.\nBut what about when gamification is applied to life and basic scheduling in routine, hmm.\n","date":"20 April 2022","permalink":"https://sneaky-potato.github.io/til/gamification/","section":"Today I Learned","summary":"","title":"Gamification"},{"content":"","date":null,"permalink":"https://sneaky-potato.github.io/tags/philosophy/","section":"Tags","summary":"","title":"Philosophy"},{"content":" Another super fancy term for something I didn\u0026rsquo;t realize I knew until I read about it. According to Wikipedia (saving you from that extra tab in your overly crowded chrome :)\nSurvivorship bias, survival bias or immortal time bias is the logical error of concentrating on the people or things that made it past some selection process and overlooking those that did not, typically because of their lack of visibility. This can lead to incorrect conclusions.\nI did not realize it until I heard this thing from a friend. In layman terms- we tend to compare our present with the things that made their way in the past, completely ignoring the things which didn\u0026rsquo;t. This in itself is a very poor comparison as nobody\u0026rsquo;s sure about the present. Also comparison is bad boys (unless it is between Admiral Snackbar and Joe ofc) now go and google more about it.\n","date":"4 April 2022","permalink":"https://sneaky-potato.github.io/til/survivorship-bias/","section":"Today I Learned","summary":"","title":"Survivorship Bias"},{"content":" An interesting Computer Vision problem with all my approaches and an elegant solution. Original problem statement file and required files here. This problem was given to me in my sophomore year as a task under my tenure in the ARK perception team.\nI haven\u0026rsquo;t done robotics in a long while (am writing this thing after leaving all that stuff behind), this being the only testimony of me having done those courses on image processing lol.\nProblem Statement # If none of the following make sense to you and those text files seem like random jargon, this post is NOT for you. Go and move on, you\u0026rsquo;re better off not knowing about all this altogether (unless you want to pursue a career in robotics, maybe)\nA breif version of the problem goes like this-\ngiven 30 files, 10 each of types 0 (RGB, jpg), 1 (Segmentation, jpg) and 2 (Pose, txt) images are 256x144 in size a projective pinhole camera is used everywhere camera has a horizontal field-of-view (FOV) of 90Â° assumptions- the distortion parameters are zero principal point of the image is at its center focal length in x direction = focal length in y direction pose data is the position of the camera in the world coordinates in the NED coordinate system it is stored in the form of an orientation quaternion and a position vector Objective #Using the information provided, calculate\nlength of the side of the cube x,y,z coordinates of the centroid of the cube WARNING: Proceed ahead only after you\u0026rsquo;re ready for the solution (after giving the problem some thought) and are already familiar with the basics of image processing and Computer Vision Initial Attempt #I started to recall everything that I\u0026rsquo;d gone through while doing my courses. Thought about applying all sorts of stuff like homography, constructing the camera matrices, using stereo pairs (seemed illogical at that time).\nMy line of thought only seemed to go in one direction- use all images separately.\nBut then I hit a dead wall when I couldn\u0026rsquo;t convert the 2D coordiantes to 3D ones (was the essence of the entire problem). I thought maybe the information given was insufficient and I needed a scale factor.\nThe whole 3D -\u0026gt; 2D conversion eats up the depth information completely, hence a (x y z) -\u0026gt; (x\u0026rsquo; y\u0026rsquo;) mapping exists. However to do the opposite, you need to materialize the depth information from somewhere.\nBut then again, I wasn\u0026rsquo;t using all the information provided to me, hinting towards my shortcoming.\nMy solution approach #Get em curves, ehm corners #I started to think of some use case to the segmentation masks provided. I had to locate corners in tha image according to image coordiantes. So there it was, I used the segmentation masks, ran them through the Harris corner detector function of OpenCV.\nThe results were good honestly,\nbut\nHmm, but hey I had many coresponding points atleast.\n2D -\u0026gt; 3D #There are a few ways in which you can achieve this. The simplest being tracing out lights rays from the corners to the center of the camera (possible with the given pose data) and then finding the intersection.\nBut then this method is bound to introduce noise. You\u0026rsquo;ll never be sure about the intersection at all. In fact you might even will have to find the point of minimum distance instead. Because, in robotics, error and noise are gonna be your arch nemesis always. Consequenty, a large part of your time will often be invested with dealing with the error.\nI had to use Triangulation. All what remained was to simulate the thing1 on the actual problem.\nEvil matrices #The key step behind all of this to work appreciably was- not screwing up simple calculation. Simple, right?\nFunnily enough, I managed to screw up the calculation each time I made the extrinsic and intrisic matrices. Why? Because the best values I could come up with were-\n55.75492842884244 66.53124150897686 73.18385840990788 9.655399061410336 These are supposed to be side lenghts of the cube ðŸ¤¡. Another run of the simulation yielded side lenghts of the order of 10^-3 to 10^3 (in the same set ðŸ¤¡ ðŸ¤¡).\nMy best guess to where I was going wrong back then would be direction of axes and the position of the 2D origin (I don\u0026rsquo;t remember, even if I did, I wouldn\u0026rsquo;t reveal it like that ofc) But then I also remember checking my camera parameters like for the N^th time.\nI even tried plotting the 3D coordinates after tweaking the paramteres like a bazillion times, only to get this\nThis, well this is supposed to be a face of the cube, which should be, idk, slightly squarish I guess? (Even the ground corner coordinates didn\u0026rsquo;t seem to go along the NED direction thing)\nDouble checked it with my peers at ARK, asked the seniors about the validity of pose data only to hit a dead end.\nResult #There were no results, I couldn\u0026rsquo;t solve it.\nHowever after this thing was over and we were discussing about it, turns out one of us at ARK did indeed manage to get a very tight approximate.\nI\u0026rsquo;ll just quote the solution algorithm he followed here.\nML and approximation #ML algorithms in their core are essentially complex approximation methods. Interestingly we can apply a well known method to get to the solution here.\nGradient descent, get a parametric equation for the original complicated equation and bam a very clean solution.\nComing directly from his repo\u0026rsquo;s README.md\nThe final approach was to create a parametric model for a cube in 3D space lying on a horizontal surface. Such a cube is sufficiently described by 5 parameters - the x, y, z coordinates of its centroid, the angle of rotation about the vertical (z-axis), and the side length. The parameterization used has s as the semi side length for a cleaner formula representation. The corners of this cube can be found in terms of these parameters and keys/color descriptors can be assigned in cyclic order. These keys were manually assigned, although it is possible to automatically assign them using the detected color data. With this description, the distance of each corner can be found to all the corresponding projection lines and the sum of the squares of these distances is taken as a loss function. Tensorflow is then used to automatically differentiate and optimize the values of these parameters using the Adam optimizer.\nHere\u0026rsquo;s the link to his repo\nTriangulation, 16-385 Computer Vision, Spring 2020\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"5 March 2022","permalink":"https://sneaky-potato.github.io/blog/cv/","section":"Blog","summary":"","title":"A Computer Vision Problem"},{"content":" Getting things done while procrastinating. There is literally a whole website dedicated to this thing here. The footer of the website captures the main idea -\nSite designed by the author\u0026rsquo;s granddaughter, who did the work while avoiding the far more weighty assignment of her literature test.\nThe concept has major intersection with the living asynchronously idea (do give it a read as well).\nThe whole thing revolves around getting the low priority things done while you\u0026rsquo;re procrastinating the high priority ones. You might not have realized it but at some point you were procrastinating structurally too. I, too found this website while procrastinating some very important stuff.\nQuite creatively you can still get things done while selecting which tasks to assign the high priority. One doesn\u0026rsquo;t need to be the master of their time, but some work done is any day better than no work done.\n","date":"6 December 2021","permalink":"https://sneaky-potato.github.io/til/structured-procrastination/","section":"Today I Learned","summary":"","title":"Structured Procrastination"},{"content":" Disclaimer: This post is absolutely not about my butt curves. Now letâ€™s start this thing off with a boring-made-up quote\nWhen it comes to building / learning stuff one can never and should never forget the tools which led them to tangible feat. Things get real serious when those tools happen to be the very same dark-shiny-squarish boxes which filled your eyes with a childish glossom (maybe?) when they arrived. (I mean, I have my algorithms lab tomorrow and Iâ€™m still writing this blog, câ€™mon man itâ€™s dead serious)\nJune 2013 #I was in sixth grade when that large alien box arrived. Just like any other kid I was literally jumping to open it up and use it. Yep, am talking â€˜bout my first personal computer mate (I was more of a caveman uptill 2013 o_O). And yes the boy sure got a name too. â€˜Tis El-Machina but I guess Elmach works as well. I wonâ€™t be going too deep into specifications but it is a lenevo product (reliable buckets they produce OwO), an all in one PC which came packed with a shiny Windows 8 as I reckon. I isnâ€™t built for gaming (dude has some intel graphics in the name of gpu) and since itâ€™s an all in one PC I was too scared to upgrade it (plus I didnâ€™t have that elder tech support guy in my family). But I do remember I could play and finish up GTA 5 in it (after making several rounds to â€” Low Spec Gamer1 xD). Even did all my JEE prep in that rig. I used it majorly for, umm yeah the usual stuff - movies, games, music, pictures, web surfing, literally everything. Ooh by the way, heâ€™s doing just fine today as well. Just some signs of old age (:P). Oooh and btw I recently dual booted Ubuntu 18.04 into him for research purposes (no seriously, for some task in computer vision (man, Iâ€™ve been doin too much parenthesization lmao))). So yeah the boy shall play well for some more years.\nNovember 2020 #So I got a new beast girl (yup all desktops are bois and all laptops are gorls, no further discussion). Has been a year and thingâ€™s are going awesome. So sheâ€™s from Dell and her name is Electric-Monolith (yeah dass the best I could come up with plis no attaccs) or Elmon (kinda cute :3). So now I do have a decent GPU and do play sometimes (~~~ignoring the fact that most of my time gets eaten up by algo lab :\u0026quot;~~~). Windows 10 with WSL2 configured and thatâ€™s all I could for, ask as far as my development environment is concerned. Maybe Iâ€™d add some pictures in here if I get time. Until then I guess thisâ€™ll end here :-)\nHereâ€™s a random thing you can try doing: make a directory / file and name it con in windows :D\nChannelâ€™s an absolute gem for the low-end-peripheral junta Low Spec Gamer\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"10 November 2021","permalink":"https://sneaky-potato.github.io/blog/my-dynamic-duo/","section":"Blog","summary":"","title":"My Dynamic Duo"},{"content":"","date":null,"permalink":"https://sneaky-potato.github.io/tags/nostalgia/","section":"Tags","summary":"","title":"Nostalgia"},{"content":" *gasps* here we go Hi there #You are currently having a one-sided-textual-probably-monotonous-(tryhard?)-talk with me through this page.\n(Not one-sided anymore, thanks to utterances, feel free to comment on this or any of my posts that you find interesting. Dire need of some activity here :P)\nI\u0026rsquo;m an undergraduate student from the department of Computer Science and Engineering at Indian Institute of Technology, Kharagpur.\nIn my free time you\u0026rsquo;d probably find me watching some anime series, reading some book or reading one of the blogs I follow.\nIf you\u0026rsquo;re bored, let\u0026rsquo;s have a chat. I\u0026rsquo;d absolutely enjoy your views (and would love to give you my views on your views), thoughts, experiences.\nAt the time of writing of this page, I am on Elmon running Pop OS. (Although the page has been updated many times)\nPS: If I ever happen to meet you for the first time I\u0026rsquo;m gonna stand next to you so I look like I know someone ok? (._. )\nTech Stack #I love tinkering with stuff and code sometimes.\nI like to think of my background bit like a pizza. The base is Mathematics, the sauce is Engineering and Computer Science, and the toppings, well, the toppings will depend on the project that Iâ€™m working on at the time.\nI\u0026rsquo;ve worked in both frontend and backend development. I\u0026rsquo;ve done courses on Image processing and Deep Learning. Also, recently I\u0026rsquo;ve started reading about software design patterns and have developed interest in systems.\nMy current OS is Arch Linux\nMy GitHub profile would be a more accurate representation of this section I guess.\nNon Tech Stack #I mostly listen to rock and related subgenres.\nNot much of a bibliophile but I\u0026rsquo;ve particularly started enjoying reading satire, humor and dystopian (apparently).\nI also follow documentaries on internet culture (both the bright and dark sides ðŸ’€) and love curating creative works from the corners of the internet.\n","date":"1 November 2021","permalink":"https://sneaky-potato.github.io/about/","section":"sneaky-potato","summary":"","title":"About"},{"content":" Cuz why not? How to clichÃ© recipe 101\nmake a website using some SSG start adding blog posts on it talk about pHiLoSoPhY, lIfEsTyLe, lItErAtUrE and mostly non-tech (disguised attempt to gain social points ðŸ¤¡) (Yup, acting like that cool doge is the final step in the recipe)\nSighs, Iâ€™ll try my best to make the content a little interesting atleast so please bear with my nagging :x\nAlso, feel free to comment on any of my blog posts, I\u0026rsquo;d really appreciate it.\n","date":"1 November 2021","permalink":"https://sneaky-potato.github.io/blog/take-off/","section":"Blog","summary":"","title":"take-off.yml"},{"content":"","date":null,"permalink":"https://sneaky-potato.github.io/tags/warning/","section":"Tags","summary":"","title":"Warning"},{"content":"","date":null,"permalink":"https://sneaky-potato.github.io/tags/book/","section":"Tags","summary":"","title":"Book"},{"content":" Finally some innovation on a dictionary. I\u0026rsquo;m no bibliophile but do appreaciate good writing.\nThat is, while looking for another book to add it to my overflowing stack of not-gonna-read-but-hey-its-cool-ill-read-afterwards list, (a long pause here) I happened to stumble upon this piece of literature.\nA satirical dictionary written by American journalist Ambrose Bierce, consisting of common words followed by humorous and satirical definitions, I\u0026rsquo;d say it is indeed a fine work of art.\nSome examples-\nYEAR, n. A period of three hundred and sixty-five disappointments.\nDOCTOR, n. A gentleman who thrives upon disease and dies of health.\nENVELOPE, n. The coffin of a document; the scabbard of a bill; the husk of a remittance; the bed-gown of a love-letter.\nAnd ofc, there\u0026rsquo;s a website dedicated to it here so you can look it up whenever you want.\nAlso please do drop in any good satire literary pieces in the comments, I\u0026rsquo;ll gladly take out time to read them.\n","date":"3 March 2021","permalink":"https://sneaky-potato.github.io/til/devils-dictionary/","section":"Today I Learned","summary":"","title":"Devil's Dictionary"},{"content":"","date":null,"permalink":"https://sneaky-potato.github.io/tags/humour/","section":"Tags","summary":"","title":"Humour"},{"content":"","date":null,"permalink":"https://sneaky-potato.github.io/categories/","section":"Categories","summary":"","title":"Categories"}]